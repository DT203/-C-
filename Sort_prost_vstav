#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "rus");
    const int N = 11;
    const int H = 21;
    const int Z = 31;
    const int W = 11;
    const int Q = 21;
    const int Y = 31;
    int a[N] = { 12, 5, 3, 2, 45, 96, 6, 8, 11, 24 };
    int b[H] = { 12, 5, 3, 2, 45, 96, 6, 8, 11, 24, 70, 81, 66, 13, 10, 44, 99, 98, 14 };
    int c[Z] = { 12, 5, 3, 2, 45, 96, 6, 8, 11, 24, 70, 81, 66, 13, 10, 44, 99, 98, 14, 15, 16, 17, 22, 28, 31, 41, 72, 4, 1 };
    int d[W] = { 1, 2, 3, 4, 5, 6, 10, 8, 9 };
    int f[Q] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 15, 16, 19, 18, 17 };
    int p[Y] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 29, 26, 27, 28 };

    int buff = 0; // для хранения перемещаемого значения
    int i, j; // для циклов 
    int number; // номер сортировки в консоли
    int chetchik_1 = 0; // счетчик перестановок
   
    cout << "Выберите нужную сортировку массива вставками" << endl;
    cout << "1) Сортировка массива имеющие случайное значение из 10 элементов" << endl;
    cout << "2) Сортировка массива имеющие случайное значение из 20 элементов" << endl;
    cout << "3) Сортировка массива имеющие случайное значение из 30 элементов" << endl;
    cout << "4) Сортировка массива с почти отсортированными значениями из 10 элементов" << endl;
    cout << "5) Сортировка массива с почти отсортированными значениями из 20 элементов" << endl;
    cout << "6) Сортировка массива с почти отсортированными значениями из 30 элементов" << endl;
    cout << "7) Сортировка массива от большего к меньшему из 10 элементов" << endl;
    cout << "8) Сортировка массива от большего к меньшему из 20 элементов" << endl;
    cout << "9) Сортировка массива от большего к меньшему из 30 элементов" << endl;
    cin >> number;

    switch (number) {
    case 1:

        /************* Начало сортировки для 10 элементов, случайное значение *******************/
        for (i = 1; i < N; i++)
        {
            buff = a[i]; // запомним обрабатываемый элемент
            // и начнем перемещение элементов слева от него
            // пока запомненный не окажется меньше чем перемещаемый
            for (j = i - 1; j >= 0 && a[j] > buff; j--, chetchik_1++)
                a[j + 1] = a[j];

            a[j + 1] = buff; // и поставим запомненный на его новое место 
        }
        /************* Конец сортировки *******************/

        for (int i = 1; i < N; i++) // вывод отсортированного массива
            cout << a[i] << '\t';
        cout << endl;
          cout << "Выполнено Сравнений : " << chetchik_1 + 1 ;
        break;
    
    case 2:

        /************* Начало сортировки для 20 элементов, случайное значение *******************/
        for (i = 1; i < H; i++)
        {
            buff = b[i]; // запомним обрабатываемый элемент
            // и начнем перемещение элементов слева от него
            // пока запомненный не окажется меньше чем перемещаемый
            for (j = i - 1; j >= 0 && b[j] > buff; j--, chetchik_1++)
                b[j + 1] = b[j];

            b[j + 1] = buff; // и поставим запомненный на его новое место 
        }
        /************* Конец сортировки *******************/

        for (int i = 1; i < H; i++) // вывод отсортированного массива
            cout << b[i] << '\t';
        cout << endl;
          cout << "Выполнено Сравнений : " << chetchik_1 + 1 ;
        break;

    case 3 :

        /************* Начало сортировки для 30 элементов, случайное значение *******************/
        for (i = 1; i < Z; i++)
        {
            buff = c[i]; // запомним обрабатываемый элемент
            // и начнем перемещение элементов слева от него
            // пока запомненный не окажется меньше чем перемещаемый
            for (j = i - 1; j >= 0 && c[j] > buff; j--, chetchik_1++)
                c[j + 1] = c[j];

            c[j + 1] = buff; // и поставим запомненный на его новое место 
        }
        /************* Конец сортировки *******************/

        for (int i = 1; i < Z; i++) // вывод отсортированного массива
            cout << c[i] << '\t';
        cout << endl;
          cout << "Выполнено Сравнений : " << chetchik_1 + 1 ;
        break;

    case 4 :

        /************* Начало сортировки для 10 элементов с почти отсортированными значениями  *******************/
        for (i = 1; i < W; i++)
        {
            buff = d[i]; // запомним обрабатываемый элемент
            // и начнем перемещение элементов слева от него
            // пока запомненный не окажется меньше чем перемещаемый
            for (j = i - 1; j >= 0 && d[j] > buff; j--, chetchik_1++)
                d[j + 1] = d[j];

            d[j + 1] = buff; // и поставим запомненный на его новое место 
        }
        /************* Конец сортировки *******************/

        for (int i = 1; i < W; i++) // вывод отсортированного массива
            cout << d[i] << '\t';
        cout << endl;
          cout << "Выполнено Сравнений : " << chetchik_1 + 1 ;
        break;
    
    case 5 :

        /************* Начало сортировки для 20 элементов с почти отсортированными значениями  *******************/
        for (i = 1; i < Q; i++)
        {
            buff = f[i]; // запомним обрабатываемый элемент
            // и начнем перемещение элементов слева от него
            // пока запомненный не окажется меньше чем перемещаемый
            for (j = i - 1; j >= 0 && f[j] > buff; j--, chetchik_1++)
                f[j + 1] = f[j];

            f[j + 1] = buff; // и поставим запомненный на его новое место 
        }
        /************* Конец сортировки *******************/

        for (int i = 1; i < Q; i++) // вывод отсортированного массива
            cout << f[i] << '\t';
        cout << endl;
          cout << "Выполнено Сравнений : " << chetchik_1 + 1 ;
        break;

    case 6 : 

        /************* Начало сортировки для 30 элементов с почти отсортированными значениями  *******************/
        for (i = 1; i < Y; i++)
        {
            buff = p[i]; // запомним обрабатываемый элемент
            // и начнем перемещение элементов слева от него
            // пока запомненный не окажется меньше чем перемещаемый
            for (j = i - 1; j >= 0 && p[j] > buff; j--, chetchik_1++)
                p[j + 1] = p[j];

            p[j + 1] = buff; // и поставим запомненный на его новое место 
        }
        /************* Конец сортировки *******************/

        for (int i = 1; i < Y; i++) // вывод отсортированного массива
            cout << p[i] << '\t';
        cout << endl;
          cout << "Выполнено Сравнений : " << chetchik_1 + 1 ;
        break;

    case 7 :

        /************* Начало сортировки для 10 элементов, от большего к меньшему *******************/
        for (i = 1; i < N; i++)
        {
            buff = a[i]; // запомним обрабатываемый элемент
            // и начнем перемещение элементов слева от него
            // пока запомненный не окажется меньше чем перемещаемый
            for (j = i - 1; j >= 0 && a[j] > buff; j--, chetchik_1++)
                a[j + 1] = a[j];

            a[j + 1] = buff; // и поставим запомненный на его новое место 
        }
        /************* Конец сортировки *******************/

        for (int i = 10; i > 0; i--)  // вывод отсортированного массива от большего к меньшему
            cout << a[i] << '\t';
        cout << endl;
          cout << "Выполнено Сравнений : " << chetchik_1 + 1 ;
        break;


    case 8:

        /************* Начало сортировки для 20 элементов, от большего к меньшему *******************/
        for (i = 1; i < H; i++)
        {
            buff = b[i]; // запомним обрабатываемый элемент
            // и начнем перемещение элементов слева от него
            // пока запомненный не окажется меньше чем перемещаемый
            for (j = i - 1; j >= 0 && b[j] > buff; j--, chetchik_1++)
                b[j + 1] = b[j];

            b[j + 1] = buff; // и поставим запомненный на его новое место 
        }
        /************* Конец сортировки *******************/

        for (int i = 20; i > 0; i--)  // вывод отсортированного массива от большего к меньшему
            cout << b[i] << '\t';
        cout << endl;
          cout << "Выполнено Сравнений : " << chetchik_1 + 1 ;
        break;

    case 9:

        /************* Начало сортировки для 20 элементов, от большего к меньшему *******************/
        for (i = 1; i < Z; i++)
        {
            buff = c[i]; // запомним обрабатываемый элемент
            // и начнем перемещение элементов слева от него
            // пока запомненный не окажется меньше чем перемещаемый
            for (j = i - 1; j >= 0 && c[j] > buff; j--, chetchik_1++)
                c[j + 1] = c[j];

            c[j + 1] = buff; // и поставим запомненный на его новое место 
        }
        /************* Конец сортировки *******************/

        for (int i = 30; i > 0; i--)  // вывод отсортированного массива от большего к меньшему
            cout << c[i] << '\t';
        cout << endl;
          cout << "Выполнено Сравнений : " << chetchik_1 + 1 ;
        break;
    }
   
}
